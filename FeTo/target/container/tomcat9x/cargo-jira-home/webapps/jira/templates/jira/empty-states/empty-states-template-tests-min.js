AJS.test.require(["jira.webresources:empty-states","jira.webresources:wrm-context-path"],(function(){"use strict";require(["jira/empty-states/template","wrm/context-path"],(function(e,t){var s=".empty-state__container",r=s+" .empty-state__spot",n=s+" .empty-state__message",i=s+" .empty-state__hint";function o(e,t){var s=e.querySelector(r);ok(s,"Could not find `.empty-state__spot` element");equal(s.getAttribute("src"),t,"Expected different image src attribute")}module("Jira EmptyStates",{setup:function(){this.fixture=document.getElementById("qunit-fixture")},teardown:function(){this.fixture.innerHTML=""}});test("Should use a default image when $imageURL not provided",(function(){this.fixture.innerHTML=e.render({message:""});o(this.fixture,t()+"/images/empty-states/no-results.svg")}));test("Should use provided $imageURL",(function(){var t="/some/path/to/image.svg";this.fixture.innerHTML=e.render({message:"",imageURL:t});o(this.fixture,t)}));["some-css-class","class1 class2","class3 class2 class1",void 0,""].forEach((function(t){test("Should render the empty state container with correct css classes for $extraClasses="+t,(function(){this.fixture.innerHTML=e.render({message:"",extraClasses:t});var r=this.fixture.querySelector(s),n=Array.from(r.classList.values()).sort(),i=t&&t.trim()?t.trim().split(" "):[];i.push("empty-state__container");i.sort();deepEqual(n,i,"Expected different css classes")}))}));["No issues were found to match your search","<strong>markup should be escaped here</strong>",""].forEach((function(t){test("Should render the empty state message for $message="+t,(function(){this.fixture.innerHTML=e.render({message:t});var s=this.fixture.querySelector(n);ok(s,"Could not find `.empty-state__message` element");equal(s.textContent,t,"Expected different empty state message");equal(this.fixture.querySelector(i),null,"Hint element should not be rendered")}))}));var a=["Try logging in to see more results",'Try <a href="#">logging in</a> to see more results'];a.forEach((function(t){test("Should render the empty state hint for $hint="+t+" with not provided 'noAutoescapeHint'",(function(){this.fixture.innerHTML=e.render({message:"",hint:t});var s=this.fixture.querySelector(i);ok(s,"Could not find `.empty-state__hint` element");equal(s.textContent,t,"Expected different empty state hint")}))}));a.forEach((function(t){test("Should render the empty state hint for $hint="+t+" with $noAutoescapeHint=true",(function(){this.fixture.innerHTML=e.render({message:"",hint:t,noAutoescapeHint:!0});var s=this.fixture.querySelector(i);ok(s,"Could not find `.empty-state__hint` element");equal(s.innerHTML,t,"Expected different empty state hint")}))}))}))}));