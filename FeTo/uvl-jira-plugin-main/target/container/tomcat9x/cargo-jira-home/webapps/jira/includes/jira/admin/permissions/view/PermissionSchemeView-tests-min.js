AJS.test.require("jira.webresources:projectpermissions",(function(){"use strict";var e,s=require("jquery"),i=require("underscore"),t=require("jira/backbone-1.3.3"),r=require("jira/project/permissions/permissionschememodel"),n={permissionKey:"ADD_COMMENTS",permissionName:"Add comments",permissionDesc:"Adding comments",grants:[{displayName:"Application Role",securityType:"applicationRole",values:[{id:1,displayValue:"Administrators"}]}]},o={permissionKey:"REMOVE_COMMENTS",permissionName:"Remove comments",permissionDesc:"Removing comments",grants:[{displayName:"Application Role",securityType:"applicationRole",values:[{id:2}]}]},a={permissionKey:"CREATE_PROJECTS",permissionName:"Create projects",permissionDesc:"Creating projects",grants:[{displayName:"Application Role",securityType:"applicationRole",values:[{id:1}]}]},c={heading:"Issue Permissions",sectionType:"issue",permissions:[n.permissionKey,o.permissionKey]},d={heading:"Project Permissions",sectionType:"project",permissions:[a.permissionKey]};function l(e){var s=new r({id:12345});s.fetch();e.requests[0].respond(200,{"Content-Type":"application/json"},JSON.stringify({name:"test scheme",description:"test scheme",displayRendering:{readOnly:!1,grouping:[c,d]},permissions:[n,o,a]}));return s}function p(){this.context=AJS.test.mockableModuleContext();this.mockMetrics={start:sinon.spy(),end:sinon.spy()};this.mockOpen=sinon.spy();this.mockAddPermissionView=t.View.extend({open:this.mockOpen,render:i.noop});this.mockDeletePermissionView=t.View.extend({open:this.mockOpen,render:i.noop});this.context.mock("internal/browser-metrics",this.mockMetrics);this.context.mock("jira/project/permissions/addpermissionview",this.mockAddPermissionView);this.context.mock("jira/project/permissions/deletepermissionview",this.mockDeletePermissionView);return this.context.require("jira/project/permissions/permissionschemeview")}module("Dialog rendering",{setup:function(){var e=p.call(this);this.sandbox=sinon.sandbox.create({useFakeServer:!0});this.schemeModel=l(this.sandbox.server);this.view=new e({el:s("#qunit-fixture"),model:this.schemeModel});this.view.render()},teardown:function(){this.sandbox.restore()}});test("Ensure all permission groups are rendered correctly",(function(){var e=this.view.$el.find(".permissions-group");strictEqual(e.length,2,"Should have two permission groups");strictEqual(AJS.$(".project-permissions-category-header",e[0]).text(),c.heading,"First permission group should be issue permissions");strictEqual(AJS.$(".project-permissions-category-header",e[1]).text(),d.heading,"Second permission group should be project permissions")}));test("Ensure permission group content is rendered correctly",(function(){var e=this.view.$el.find(".permissions-group").first(),s=AJS.$(".jira-admin-table tbody tr",e),i=s.length;strictEqual(i,c.permissions.length,"Should have the correct number of permissions in group");var t=s.first();strictEqual(t.find(".title").text(),n.permissionName,"Should have rendered permission title");strictEqual(t.find(".description").text(),n.permissionDesc,"Should have rendered permission description");var r=t.find(".grants dl.types"),o=r.find("dt").length;strictEqual(o,n.grants.length,"Add Comment should have the right number of grants");strictEqual(r.find("dt").text(),n.grants[0].displayName,"Should have application role title");strictEqual(r.find("dd").text(),n.grants[0].values[0].displayValue,"Should have the administration application role grant")}));test("Ensure on an add event browser metrics are started and ended",(function(){var e=this.view.$el.find(".permissions-group").first().find(".jira-admin-table tbody tr").first();ok(!this.mockOpen.called,"Should not have called the open function yet");ok(!this.mockMetrics.start.called,"Should not have started metrics yet");ok(!this.mockMetrics.end.called,"Should not have ended metrics, considering it hasn't started");e.find(".add-trigger").click();ok(this.mockOpen.called,"Should have called the open function");ok(this.mockMetrics.start.called,"Start of metrics should have been begun");ok(!this.mockMetrics.end.called,"End of metrics should not have been called until rendered");this.view._addView.trigger("contentLoaded");ok(this.mockMetrics.end.called,"End of metrics should now have been called")}));test("Ensure on delete event browser metrics are started and ended",(function(){var e=this.view.$el.find(".permissions-group").first().find(".jira-admin-table tbody tr").first();ok(!this.mockOpen.called,"Should not have called the open function yet");ok(!this.mockMetrics.start.called,"Should not have started metrics yet");ok(!this.mockMetrics.end.called,"Should not have ended metrics, considering it hasn't started");e.find(".delete-trigger").click();ok(this.mockOpen.called,"Should have called the open function");ok(this.mockMetrics.start.called,"Start of metrics should have been begun");ok(!this.mockMetrics.end.called,"End of metrics should not have been called until rendered");this.view._deleteView.trigger("contentLoaded");ok(this.mockMetrics.end.called,"End of metrics should now have been called")}));module("Rendering feedback messages",{setup:function(){this.sandbox=sinon.sandbox.create({useFakeServer:!0});var s=p.call(this),i=l(this.sandbox.server);e=new s({model:i})},teardown:function(){s(".aui-flag .aui-close-button").click();this.sandbox.restore()}});test("null server response renders generic error message",(function(){e.displayOperationFailureMessage();u("admin.permissions.feedback.unspecifiederror.title","warning");m("admin.permissions.feedback.unspecifiederror.description")}));test("server response with empty errorMessages renders generic error message",(function(){e.displayOperationFailureMessage({errorMessages:[]});u("admin.permissions.feedback.unspecifiederror.title","warning");m("admin.permissions.feedback.unspecifiederror.description")}));test("server response with a single item in errorMessages collection renders correct message",(function(){e.displayOperationFailureMessage({errorMessages:["only a single error somewhere"]});u("admin.permissions.feedback.feedbackerror.title.single","warning")}));test("server response with multiple items in errorMessages collection renders correct message",(function(){e.displayOperationFailureMessage({errorMessages:["error #1","error #2"]});u("admin.permissions.feedback.feedbackerror.title.multiple","warning");m("admin.permissions.feedback.feedbackerror.desc")}));test("server response without unknown result type renders no message",(function(){e.displayOperationSuccessMessage({operationResult:{type:"invalid-type"}});strictEqual(s("#aui-flag-container .aui-flag[open]").size(),0,"no flags should be visible")}));test("server response with success result type renders success message",(function(){var s="This should be a success message!";e.displayOperationSuccessMessage({operationResult:{type:"success",messages:[s]}});h(s,"success")}));test("server response with info result type renders info message",(function(){var s="This should be an info message!";e.displayOperationSuccessMessage({operationResult:{type:"info",messages:[s]}});h(s,"info")}));test("server response with multiple messages should render only the first one",(function(){var s="This is the expected message to be rendered";e.displayOperationSuccessMessage({operationResult:{type:"success",messages:[s,"This message should not be rendered in the Project Permissions page"]}});h(s,"success")}));function u(e,i){var t=function(e){var i=s("#aui-flag-container .aui-flag[open] .title:contains("+e+")");strictEqual(i.size(),1,'a flag with title "'+e+'" was expected');return i.parent()}(e);g(t,i)}function m(e){var i=s("#aui-flag-container .aui-flag[open] .aui-message").contents().filter((function(){return 3===this.nodeType&&-1!==this.nodeValue.indexOf(e)}));strictEqual(i.size(),1,'a flag with body text "'+e+'" was expected');return i.parents(".aui-message")}function h(e,s){g(m(e),s)}function g(e,s){strictEqual(e.is(".aui-message-"+s),!0,"expected flag have class aui-message-"+s)}}));