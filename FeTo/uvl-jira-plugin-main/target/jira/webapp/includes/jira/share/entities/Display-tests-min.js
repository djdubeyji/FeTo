AJS.test.require(["jira.webresources:share-types","jira/share/entities/display"],(function(){"use strict";var s=require("jira/share/entities/display"),e=require("jquery");module("Display",{setup:function(){this.key="userKey";var a="span_id";this.sandbox=sinon.sandbox.create();this.display=new s(this.key,"","","",this.key);this.dataSpan=document.createElement("span");e("body").append(this.dataSpan);this.dataSpan.id=a;this.dataSpan.innerHTML=this.key;this.display.dataSpanId=a},teardown:function(){this.sandbox.restore();this.dataSpan.remove()}});test("Leaves the userKey in place if fails to fetch the displayName",(function(){expect(2);var s=this,a=this.sandbox.stub(e,"ajax");this.display.updateDisplayName();window.setTimeout((function(){sinon.assert.calledOnce(a);sinon.assert.match(s.dataSpan.innerHTML,s.key);QUnit.start()}),0);QUnit.stop()}));test("Swaps userKey for displayName if possible",(function(){expect(4);var s=this,a="Display Name",t={displayName:a},i=this.sandbox.stub(e,"ajax").yieldsTo("success",t),n=this.sandbox.spy(this.display,"swapNames"),d=this.sandbox.stub(this.display,"getMessage",(function(){return a}));this.display.updateDisplayName();window.setTimeout((function(){sinon.assert.calledOnce(i);sinon.assert.calledOnce(n);sinon.assert.calledOnce(d);sinon.assert.match(s.dataSpan.innerHTML,a);QUnit.start()}),0);QUnit.stop()}))}));