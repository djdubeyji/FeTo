AJS.test.require(["jira.webresources:color-picker"],(function(){"use strict";var e=require("jira/marionette-3.1");module("Color picker component",{setup:function(){this.context=AJS.test.mockableModuleContext();this.colorPickerView=e.View.extend({render:function(){}});this.context.mock("jira/components/color-picker/view/color-picker-view",this.colorPickerView);this.ControllerClass=this.context.require("jira/components/color-picker/color-picker-controller")}});test("Model is initialized with passed parameters",(function(){var e="random id",o="error message",r="name",t=new this.ControllerClass({id:e,errorMessage:o,name:r});equal(t.model.get("color"),null);equal(t.model.get("colorDefined"),!1);equal(t.model.get("id"),e);equal(t.model.get("errorMessage"),o);equal(t.model.get("name"),r)}));test("When initial value is passed to constructor, model is initialised with it",(function(){var e="my new and shiny color",o=new this.ControllerClass({value:e});equal(o.model.get("color"),e);equal(o.model.get("colorDefined"),!0)}));test("When event is triggered, new color is set",(function(){var e="my new and shiny color",o=new this.ControllerClass({});o.view.trigger("colorChanged",e);equal(o.model.get("color"),e);equal(o.model.get("colorDefined"),!0)}));test("When event is triggered but color is empty, it is removed from model",(function(){var e=new this.ControllerClass({value:"my new and shiny color"});e.view.trigger("colorChanged",void 0);equal(e.model.get("color"),null);equal(e.model.get("colorDefined"),!1)}))}));